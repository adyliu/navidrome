// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230314231417-0cfaaa77a7d2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of albums
	// (GET /albums)
	GetAlbums(w http.ResponseWriter, r *http.Request, params GetAlbumsParams)
	// Retrieve an individual album
	// (GET /albums/{albumId})
	GetAlbum(w http.ResponseWriter, r *http.Request, albumId string, params GetAlbumParams)
	// Retrieve a list of artists
	// (GET /artists)
	GetArtists(w http.ResponseWriter, r *http.Request, params GetArtistsParams)
	// Retrieve an individual artist
	// (GET /artists/{artistId})
	GetArtist(w http.ResponseWriter, r *http.Request, artistId string, params GetArtistParams)
	// Get server's global info
	// (GET /server)
	GetServerInfo(w http.ResponseWriter, r *http.Request)
	// Get a list of tracks
	// (GET /tracks)
	GetTracks(w http.ResponseWriter, r *http.Request, params GetTracksParams)
	// Retrieve an individual track
	// (GET /tracks/{trackId})
	GetTrack(w http.ResponseWriter, r *http.Request, trackId string, params GetTrackParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	// ------------- Optional query parameter "page[limit]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[limit]", r.URL.Query(), &params.PageLimit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[limit]", Err: err})
		return
	}

	// ------------- Optional query parameter "page[offset]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[offset]", r.URL.Query(), &params.PageOffset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[offset]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[equals]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[equals]", r.URL.Query(), &params.FilterEquals)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[equals]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[contains]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[contains]", r.URL.Query(), &params.FilterContains)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[contains]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[lessThan]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[lessThan]", r.URL.Query(), &params.FilterLessThan)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[lessThan]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[lessOrEqual]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[lessOrEqual]", r.URL.Query(), &params.FilterLessOrEqual)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[lessOrEqual]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[greaterThan]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[greaterThan]", r.URL.Query(), &params.FilterGreaterThan)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[greaterThan]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[greaterOrEqual]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[greaterOrEqual]", r.URL.Query(), &params.FilterGreaterOrEqual)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[greaterOrEqual]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[startsWith]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[startsWith]", r.URL.Query(), &params.FilterStartsWith)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[startsWith]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[endsWith]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[endsWith]", r.URL.Query(), &params.FilterEndsWith)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[endsWith]", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", r.URL.Query(), &params.Include)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "include", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlbums(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAlbum operation middleware
func (siw *ServerInterfaceWrapper) GetAlbum(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "albumId" -------------
	var albumId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "albumId", runtime.ParamLocationPath, chi.URLParam(r, "albumId"), &albumId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "albumId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumParams

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", r.URL.Query(), &params.Include)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "include", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlbum(w, r, albumId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArtists operation middleware
func (siw *ServerInterfaceWrapper) GetArtists(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArtistsParams

	// ------------- Optional query parameter "page[limit]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[limit]", r.URL.Query(), &params.PageLimit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[limit]", Err: err})
		return
	}

	// ------------- Optional query parameter "page[offset]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[offset]", r.URL.Query(), &params.PageOffset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[offset]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[equals]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[equals]", r.URL.Query(), &params.FilterEquals)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[equals]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[contains]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[contains]", r.URL.Query(), &params.FilterContains)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[contains]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[lessThan]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[lessThan]", r.URL.Query(), &params.FilterLessThan)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[lessThan]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[lessOrEqual]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[lessOrEqual]", r.URL.Query(), &params.FilterLessOrEqual)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[lessOrEqual]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[greaterThan]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[greaterThan]", r.URL.Query(), &params.FilterGreaterThan)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[greaterThan]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[greaterOrEqual]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[greaterOrEqual]", r.URL.Query(), &params.FilterGreaterOrEqual)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[greaterOrEqual]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[startsWith]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[startsWith]", r.URL.Query(), &params.FilterStartsWith)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[startsWith]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[endsWith]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[endsWith]", r.URL.Query(), &params.FilterEndsWith)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[endsWith]", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", r.URL.Query(), &params.Include)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "include", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArtists(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArtist operation middleware
func (siw *ServerInterfaceWrapper) GetArtist(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "artistId" -------------
	var artistId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "artistId", runtime.ParamLocationPath, chi.URLParam(r, "artistId"), &artistId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "artistId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArtistParams

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", r.URL.Query(), &params.Include)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "include", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArtist(w, r, artistId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetServerInfo operation middleware
func (siw *ServerInterfaceWrapper) GetServerInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServerInfo(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTracks operation middleware
func (siw *ServerInterfaceWrapper) GetTracks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTracksParams

	// ------------- Optional query parameter "page[limit]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[limit]", r.URL.Query(), &params.PageLimit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[limit]", Err: err})
		return
	}

	// ------------- Optional query parameter "page[offset]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[offset]", r.URL.Query(), &params.PageOffset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[offset]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[equals]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[equals]", r.URL.Query(), &params.FilterEquals)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[equals]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[contains]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[contains]", r.URL.Query(), &params.FilterContains)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[contains]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[lessThan]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[lessThan]", r.URL.Query(), &params.FilterLessThan)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[lessThan]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[lessOrEqual]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[lessOrEqual]", r.URL.Query(), &params.FilterLessOrEqual)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[lessOrEqual]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[greaterThan]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[greaterThan]", r.URL.Query(), &params.FilterGreaterThan)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[greaterThan]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[greaterOrEqual]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[greaterOrEqual]", r.URL.Query(), &params.FilterGreaterOrEqual)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[greaterOrEqual]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[startsWith]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[startsWith]", r.URL.Query(), &params.FilterStartsWith)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[startsWith]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[endsWith]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[endsWith]", r.URL.Query(), &params.FilterEndsWith)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[endsWith]", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", r.URL.Query(), &params.Include)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "include", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTracks(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrack operation middleware
func (siw *ServerInterfaceWrapper) GetTrack(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "trackId" -------------
	var trackId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "trackId", runtime.ParamLocationPath, chi.URLParam(r, "trackId"), &trackId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "trackId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrackParams

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", r.URL.Query(), &params.Include)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "include", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrack(w, r, trackId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/albums", wrapper.GetAlbums)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/albums/{albumId}", wrapper.GetAlbum)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/artists", wrapper.GetArtists)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/artists/{artistId}", wrapper.GetArtist)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/server", wrapper.GetServerInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tracks", wrapper.GetTracks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tracks/{trackId}", wrapper.GetTrack)
	})

	return r
}

type BadRequestJSONResponse ErrorList

type InternalServerErrorJSONResponse ErrorList

type NotAuthorizedJSONResponse ErrorList

type NotFoundJSONResponse ErrorList

type GetAlbumsRequestObject struct {
	Params GetAlbumsParams
}

type GetAlbumsResponseObject interface {
	VisitGetAlbumsResponse(w http.ResponseWriter) error
}

type GetAlbums200JSONResponse struct {
	Data  []Album         `json:"data"`
	Links PaginationLinks `json:"links"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

func (response GetAlbums200JSONResponse) VisitGetAlbumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlbums400JSONResponse struct{ BadRequestJSONResponse }

func (response GetAlbums400JSONResponse) VisitGetAlbumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlbums403JSONResponse struct{ NotAuthorizedJSONResponse }

func (response GetAlbums403JSONResponse) VisitGetAlbumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAlbums500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAlbums500JSONResponse) VisitGetAlbumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlbumRequestObject struct {
	AlbumId string `json:"albumId"`
	Params  GetAlbumParams
}

type GetAlbumResponseObject interface {
	VisitGetAlbumResponse(w http.ResponseWriter) error
}

type GetAlbum200JSONResponse struct {
	Data Album `json:"data"`
}

func (response GetAlbum200JSONResponse) VisitGetAlbumResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlbum403JSONResponse struct{ NotAuthorizedJSONResponse }

func (response GetAlbum403JSONResponse) VisitGetAlbumResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAlbum404JSONResponse struct{ NotFoundJSONResponse }

func (response GetAlbum404JSONResponse) VisitGetAlbumResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAlbum500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAlbum500JSONResponse) VisitGetAlbumResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArtistsRequestObject struct {
	Params GetArtistsParams
}

type GetArtistsResponseObject interface {
	VisitGetArtistsResponse(w http.ResponseWriter) error
}

type GetArtists200JSONResponse struct {
	Data  []Artist        `json:"data"`
	Links PaginationLinks `json:"links"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

func (response GetArtists200JSONResponse) VisitGetArtistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtists400JSONResponse struct{ BadRequestJSONResponse }

func (response GetArtists400JSONResponse) VisitGetArtistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArtists403JSONResponse struct{ NotAuthorizedJSONResponse }

func (response GetArtists403JSONResponse) VisitGetArtistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetArtists500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetArtists500JSONResponse) VisitGetArtistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArtistRequestObject struct {
	ArtistId string `json:"artistId"`
	Params   GetArtistParams
}

type GetArtistResponseObject interface {
	VisitGetArtistResponse(w http.ResponseWriter) error
}

type GetArtist200JSONResponse struct {
	Data Artist `json:"data"`
}

func (response GetArtist200JSONResponse) VisitGetArtistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtist403JSONResponse struct{ NotAuthorizedJSONResponse }

func (response GetArtist403JSONResponse) VisitGetArtistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetArtist404JSONResponse struct{ NotFoundJSONResponse }

func (response GetArtist404JSONResponse) VisitGetArtistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetArtist500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetArtist500JSONResponse) VisitGetArtistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetServerInfoRequestObject struct {
}

type GetServerInfoResponseObject interface {
	VisitGetServerInfoResponse(w http.ResponseWriter) error
}

type GetServerInfo200JSONResponse struct {
	Data ServerInfo `json:"data"`
}

func (response GetServerInfo200JSONResponse) VisitGetServerInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServerInfo403JSONResponse struct{ NotAuthorizedJSONResponse }

func (response GetServerInfo403JSONResponse) VisitGetServerInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetServerInfo500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetServerInfo500JSONResponse) VisitGetServerInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTracksRequestObject struct {
	Params GetTracksParams
}

type GetTracksResponseObject interface {
	VisitGetTracksResponse(w http.ResponseWriter) error
}

type GetTracks200JSONResponse struct {
	Data  []Track         `json:"data"`
	Links PaginationLinks `json:"links"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

func (response GetTracks200JSONResponse) VisitGetTracksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTracks400JSONResponse struct{ BadRequestJSONResponse }

func (response GetTracks400JSONResponse) VisitGetTracksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTracks403JSONResponse struct{ NotAuthorizedJSONResponse }

func (response GetTracks403JSONResponse) VisitGetTracksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTracks500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetTracks500JSONResponse) VisitGetTracksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTrackRequestObject struct {
	TrackId string `json:"trackId"`
	Params  GetTrackParams
}

type GetTrackResponseObject interface {
	VisitGetTrackResponse(w http.ResponseWriter) error
}

type GetTrack200JSONResponse struct {
	Data Track `json:"data"`
}

func (response GetTrack200JSONResponse) VisitGetTrackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTrack403JSONResponse struct{ NotAuthorizedJSONResponse }

func (response GetTrack403JSONResponse) VisitGetTrackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTrack404JSONResponse struct{ NotFoundJSONResponse }

func (response GetTrack404JSONResponse) VisitGetTrackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTrack500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetTrack500JSONResponse) VisitGetTrackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve a list of albums
	// (GET /albums)
	GetAlbums(ctx context.Context, request GetAlbumsRequestObject) (GetAlbumsResponseObject, error)
	// Retrieve an individual album
	// (GET /albums/{albumId})
	GetAlbum(ctx context.Context, request GetAlbumRequestObject) (GetAlbumResponseObject, error)
	// Retrieve a list of artists
	// (GET /artists)
	GetArtists(ctx context.Context, request GetArtistsRequestObject) (GetArtistsResponseObject, error)
	// Retrieve an individual artist
	// (GET /artists/{artistId})
	GetArtist(ctx context.Context, request GetArtistRequestObject) (GetArtistResponseObject, error)
	// Get server's global info
	// (GET /server)
	GetServerInfo(ctx context.Context, request GetServerInfoRequestObject) (GetServerInfoResponseObject, error)
	// Get a list of tracks
	// (GET /tracks)
	GetTracks(ctx context.Context, request GetTracksRequestObject) (GetTracksResponseObject, error)
	// Retrieve an individual track
	// (GET /tracks/{trackId})
	GetTrack(ctx context.Context, request GetTrackRequestObject) (GetTrackResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAlbums operation middleware
func (sh *strictHandler) GetAlbums(w http.ResponseWriter, r *http.Request, params GetAlbumsParams) {
	var request GetAlbumsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlbums(ctx, request.(GetAlbumsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlbums")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlbumsResponseObject); ok {
		if err := validResponse.VisitGetAlbumsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetAlbum operation middleware
func (sh *strictHandler) GetAlbum(w http.ResponseWriter, r *http.Request, albumId string, params GetAlbumParams) {
	var request GetAlbumRequestObject

	request.AlbumId = albumId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlbum(ctx, request.(GetAlbumRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlbum")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlbumResponseObject); ok {
		if err := validResponse.VisitGetAlbumResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetArtists operation middleware
func (sh *strictHandler) GetArtists(w http.ResponseWriter, r *http.Request, params GetArtistsParams) {
	var request GetArtistsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArtists(ctx, request.(GetArtistsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArtists")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArtistsResponseObject); ok {
		if err := validResponse.VisitGetArtistsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetArtist operation middleware
func (sh *strictHandler) GetArtist(w http.ResponseWriter, r *http.Request, artistId string, params GetArtistParams) {
	var request GetArtistRequestObject

	request.ArtistId = artistId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArtist(ctx, request.(GetArtistRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArtist")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArtistResponseObject); ok {
		if err := validResponse.VisitGetArtistResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetServerInfo operation middleware
func (sh *strictHandler) GetServerInfo(w http.ResponseWriter, r *http.Request) {
	var request GetServerInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetServerInfo(ctx, request.(GetServerInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServerInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetServerInfoResponseObject); ok {
		if err := validResponse.VisitGetServerInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetTracks operation middleware
func (sh *strictHandler) GetTracks(w http.ResponseWriter, r *http.Request, params GetTracksParams) {
	var request GetTracksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTracks(ctx, request.(GetTracksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTracks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTracksResponseObject); ok {
		if err := validResponse.VisitGetTracksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetTrack operation middleware
func (sh *strictHandler) GetTrack(w http.ResponseWriter, r *http.Request, trackId string, params GetTrackParams) {
	var request GetTrackRequestObject

	request.TrackId = trackId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTrack(ctx, request.(GetTrackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTrack")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTrackResponseObject); ok {
		if err := validResponse.VisitGetTrackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
