// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230314231417-0cfaaa77a7d2 DO NOT EDIT.
package api

// Defines values for ArtistRole.
const (
	AlbumArtist ArtistRole = "albumArtist"
	Composer    ArtistRole = "composer"
	Vocalist    ArtistRole = "vocalist"
)

// Defines values for ServerInfoFeatures.
const (
	Albums  ServerInfoFeatures = "albums"
	Artists ServerInfoFeatures = "artists"
	Images  ServerInfoFeatures = "images"
)

// Artist defines model for Artist.
type Artist struct {
	Attributes *ArtistAttributes `json:"attributes,omitempty"`

	// Id The unique identifier for the resource
	Id            string `json:"id"`
	Relationships *struct {
		Tracks struct {
			Data []ArtistTrackRelationship `json:"data"`
		} `json:"tracks"`
	} `json:"relationships,omitempty"`

	// Type The type of the resource
	Type string `json:"type"`
}

// ArtistAttributes defines model for ArtistAttributes.
type ArtistAttributes struct {
	// Bio A short biography of the artist
	Bio *string `json:"bio,omitempty"`

	// Name The name of the artist
	Name *string `json:"name,omitempty"`
}

// ArtistRole The role of an artist in a track or album
type ArtistRole string

// ArtistTrackRelationship defines model for ArtistTrackRelationship.
type ArtistTrackRelationship struct {
	Data ResourceObject `json:"data"`
	Meta struct {
		// Role The role of an artist in a track or album
		Role ArtistRole `json:"role"`
	} `json:"meta"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	Errors []ErrorObject `json:"errors"`
}

// ErrorObject defines model for ErrorObject.
type ErrorObject struct {
	Detail *string `json:"detail,omitempty"`
	Id     *string `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
	Title  *string `json:"title,omitempty"`
}

// PaginationLinks defines model for PaginationLinks.
type PaginationLinks struct {
	First *string `json:"first,omitempty"`
	Last  *string `json:"last,omitempty"`
	Next  *string `json:"next,omitempty"`
	Prev  *string `json:"prev,omitempty"`
}

// PaginationMeta defines model for PaginationMeta.
type PaginationMeta struct {
	// CurrentPage The current page in the collection
	CurrentPage *int32 `json:"currentPage,omitempty"`

	// TotalItems The total number of items in the collection
	TotalItems *int32 `json:"totalItems,omitempty"`

	// TotalPages The total numeber of pages in the collection
	TotalPages *int32 `json:"totalPages,omitempty"`
}

// ResourceObject defines model for ResourceObject.
type ResourceObject struct {
	// Id The unique identifier for the resource
	Id string `json:"id"`

	// Type The type of the resource
	Type string `json:"type"`
}

// ServerInfo defines model for ServerInfo.
type ServerInfo struct {
	// AuthRequired Whether the user has access to the server.
	AuthRequired bool `json:"authRequired"`

	// Features A list of optional features the server supports.
	Features []ServerInfoFeatures `json:"features"`

	// Server The name of the server software.
	Server string `json:"server"`

	// ServerVersion The version number of the server.
	ServerVersion string `json:"serverVersion"`
}

// ServerInfoFeatures defines model for ServerInfo.Features.
type ServerInfoFeatures string

// Track defines model for Track.
type Track struct {
	Attributes *TrackAttributes `json:"attributes,omitempty"`

	// Id The unique identifier for the resource
	Id            string `json:"id"`
	Relationships *struct {
		Artists *[]TrackArtistRelationship `json:"artists,omitempty"`
	} `json:"relationships,omitempty"`

	// Type The type of the resource
	Type string `json:"type"`
}

// TrackArtistRelationship defines model for TrackArtistRelationship.
type TrackArtistRelationship struct {
	Data ResourceObject `json:"data"`
	Meta struct {
		// Role The role of an artist in a track or album
		Role ArtistRole `json:"role"`
	} `json:"meta"`
}

// TrackAttributes defines model for TrackAttributes.
type TrackAttributes struct {
	// Album The name of the album the track belongs to
	Album string `json:"album"`

	// Artist The name of the artist who performed the track
	Artist string `json:"artist"`

	// Composer The name of the composer who created the track
	Composer *string `json:"composer,omitempty"`

	// Duration The duration of the track in seconds
	Duration float32 `json:"duration"`

	// Title The title of the track
	Title string `json:"title"`
}

// FilterContains defines model for filterContains.
type FilterContains = []string

// FilterEndsWith defines model for filterEndsWith.
type FilterEndsWith = []string

// FilterEquals defines model for filterEquals.
type FilterEquals = []string

// FilterGreaterOrEqual defines model for filterGreaterOrEqual.
type FilterGreaterOrEqual = []string

// FilterGreaterThan defines model for filterGreaterThan.
type FilterGreaterThan = []string

// FilterLessOrEqual defines model for filterLessOrEqual.
type FilterLessOrEqual = []string

// FilterLessThan defines model for filterLessThan.
type FilterLessThan = []string

// FilterStartsWith defines model for filterStartsWith.
type FilterStartsWith = []string

// Include defines model for include.
type Include = string

// PageLimit defines model for pageLimit.
type PageLimit = int32

// PageOffset defines model for pageOffset.
type PageOffset = int32

// Sort defines model for sort.
type Sort = string

// GetArtistsParams defines parameters for GetArtists.
type GetArtistsParams struct {
	// PageLimit The number of items per page
	PageLimit *PageLimit `form:"page[limit],omitempty" json:"page[limit],omitempty"`

	// PageOffset The offset for pagination
	PageOffset *PageOffset `form:"page[offset],omitempty" json:"page[offset],omitempty"`

	// FilterEquals Filter by any property with an exact match. Usage: filter[equals]=property:value
	FilterEquals *FilterEquals `form:"filter[equals],omitempty" json:"filter[equals],omitempty"`

	// FilterContains Filter by any property containing text. Usage: filter[contains]=property:value
	FilterContains *FilterContains `form:"filter[contains],omitempty" json:"filter[contains],omitempty"`

	// FilterLessThan Filter by any numeric property less than a value. Usage: filter[lessThan]=property:value
	FilterLessThan *FilterLessThan `form:"filter[lessThan],omitempty" json:"filter[lessThan],omitempty"`

	// FilterLessOrEqual Filter by any numeric property less than or equal to a value. Usage: filter[lessOrEqual]=property:value
	FilterLessOrEqual *FilterLessOrEqual `form:"filter[lessOrEqual],omitempty" json:"filter[lessOrEqual],omitempty"`

	// FilterGreaterThan Filter by any numeric property greater than a value. Usage: filter[greaterThan]=property:value
	FilterGreaterThan *FilterGreaterThan `form:"filter[greaterThan],omitempty" json:"filter[greaterThan],omitempty"`

	// FilterGreaterOrEqual Filter by any numeric property greater than or equal to a value. Usage: filter[greaterOrEqual]=property:value
	FilterGreaterOrEqual *FilterGreaterOrEqual `form:"filter[greaterOrEqual],omitempty" json:"filter[greaterOrEqual],omitempty"`

	// FilterStartsWith Filter by any property that starts with text. Usage: filter[startsWith]=property:value
	FilterStartsWith *FilterStartsWith `form:"filter[startsWith],omitempty" json:"filter[startsWith],omitempty"`

	// FilterEndsWith Filter by any property that ends with text. Usage: filter[endsWith]=property:value
	FilterEndsWith *FilterEndsWith `form:"filter[endsWith],omitempty" json:"filter[endsWith],omitempty"`

	// Sort Sort the results by one or more properties, separated by commas. Prefix the property with '-' for descending order.
	Sort *Sort `form:"sort,omitempty" json:"sort,omitempty"`

	// Include Related resources to include in the response, separated by commas
	Include *Include `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistParams defines parameters for GetArtist.
type GetArtistParams struct {
	// Include Related resources to include in the response, separated by commas
	Include *Include `form:"include,omitempty" json:"include,omitempty"`
}

// GetTracksParams defines parameters for GetTracks.
type GetTracksParams struct {
	// PageLimit The number of items per page
	PageLimit *PageLimit `form:"page[limit],omitempty" json:"page[limit],omitempty"`

	// PageOffset The offset for pagination
	PageOffset *PageOffset `form:"page[offset],omitempty" json:"page[offset],omitempty"`

	// FilterEquals Filter by any property with an exact match. Usage: filter[equals]=property:value
	FilterEquals *FilterEquals `form:"filter[equals],omitempty" json:"filter[equals],omitempty"`

	// FilterContains Filter by any property containing text. Usage: filter[contains]=property:value
	FilterContains *FilterContains `form:"filter[contains],omitempty" json:"filter[contains],omitempty"`

	// FilterLessThan Filter by any numeric property less than a value. Usage: filter[lessThan]=property:value
	FilterLessThan *FilterLessThan `form:"filter[lessThan],omitempty" json:"filter[lessThan],omitempty"`

	// FilterLessOrEqual Filter by any numeric property less than or equal to a value. Usage: filter[lessOrEqual]=property:value
	FilterLessOrEqual *FilterLessOrEqual `form:"filter[lessOrEqual],omitempty" json:"filter[lessOrEqual],omitempty"`

	// FilterGreaterThan Filter by any numeric property greater than a value. Usage: filter[greaterThan]=property:value
	FilterGreaterThan *FilterGreaterThan `form:"filter[greaterThan],omitempty" json:"filter[greaterThan],omitempty"`

	// FilterGreaterOrEqual Filter by any numeric property greater than or equal to a value. Usage: filter[greaterOrEqual]=property:value
	FilterGreaterOrEqual *FilterGreaterOrEqual `form:"filter[greaterOrEqual],omitempty" json:"filter[greaterOrEqual],omitempty"`

	// FilterStartsWith Filter by any property that starts with text. Usage: filter[startsWith]=property:value
	FilterStartsWith *FilterStartsWith `form:"filter[startsWith],omitempty" json:"filter[startsWith],omitempty"`

	// FilterEndsWith Filter by any property that ends with text. Usage: filter[endsWith]=property:value
	FilterEndsWith *FilterEndsWith `form:"filter[endsWith],omitempty" json:"filter[endsWith],omitempty"`

	// Sort Sort the results by one or more properties, separated by commas. Prefix the property with '-' for descending order.
	Sort *Sort `form:"sort,omitempty" json:"sort,omitempty"`

	// Include Related resources to include in the response, separated by commas
	Include *Include `form:"include,omitempty" json:"include,omitempty"`
}

// GetTrackParams defines parameters for GetTrack.
type GetTrackParams struct {
	// Include Related resources to include in the response, separated by commas
	Include *Include `form:"include,omitempty" json:"include,omitempty"`
}
